// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PUBLIC
  PRIVATE
  PROTECT
}

model User {
  id   Int @id @default(autoincrement())
  id42 Int @unique

  name        String       @unique
  gameProfile GameProfile?
  twoFA       Boolean      @default(false)
  twoFASecret String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Connexion from another table
  members      Member[]
  //channelAdmins Channel[] @relation("admins")
  channelOwner Channel[] @relation("owners")
  isBan        Channel[] @relation("bans")
  //channelMute   UserMute[] @relation("mute")

  //hasBlock Block[] @relation("block")
  //isBlock  Block[] @relation("blocked")

  message Message[]

  @@map("users")
}

//model Block {

//isBlock    User @relation("block", fields: [isBlockId], references: [id])
//isBlockId  Int
//hasBlock   User @relation("blocked", fields: [hasBlockId], references: [id])
//hasBlockId Int
//
//@@id([isBlock, hasBlockId])
//}

//model UserMute {
//User      User?    @relation(fields: [userId], references: [id])
//userId    Int?
//Channel   Channel? @relation(fields: [channelId], references: [id])
//channelId Int?
//}

model GameProfile {
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  wins Int
  loss Int

  @@map("gameProfile")
}

model Channel {
  id Int @id @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now()) @updatedAt

  name        String?
  avatar      String?
  description String?

  status Status?

  ownerId Int
  owner   User @relation("owners", fields: [ownerId], references: [id])

  members Member[]
  bans    User[]   @relation("bans")

  messagesId Int[]
  Message    Message[]

  password String? @db.VarChar(2000)

  @@map("channels")
}

model Member {
  id Int @id @unique @default(autoincrement())

  channelId Int
  userId    Int
  channel   Channel @relation(fields: [channelId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@map("members")
}

model Message {
  id Int @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  content String @db.VarChar(2000)

  @@map("messages")
}
